import React from 'react';
import PropTypes from 'prop-types';


/** Called from Designer this component renders svg and inside svg per each object renders <Renderer> component passing the props.
 * Renderer is dynamically generated by reading the types Example rectangle will contain <Rect> component */
class SVGRenderer extends React.Component {

    getObjectComponent(type) {
        let {objectTypes} = this.props;
        return objectTypes[type];
    }

    renderObject(object, index) {
        let {objectRefs, onMouseOver} = this.props;
        let Renderer = this.getObjectComponent(object.type);
        let styles = {
            cursor: object.isclosed ? 'not-allowed' : 'move'
        };
        return (
            <Renderer onRender={(ref) => objectRefs[index] = ref}
                      onMouseOver={onMouseOver.bind(this, index)}
                      object={object}  key={index} index={index}
                      style={styles}/>
        );
    }

    render() {
        let {background, objects, svgStyle, canvas,
            onMouseDown, onRender} = this.props;
        let {width, height, canvasOffsetX, canvasOffsetY} = canvas;

        let style = {
                ...styles.canvas,
                ...background ? background : {backgroundColor: 'transparent'},
                ...svgStyle,
                marginTop: canvasOffsetY,
                marginLeft: canvasOffsetX,
                border: '1px solid black'
        };



        return (
            <svg onMouseDown={onMouseDown}
                 ref={onRender}
                 width={width}
                 height={height}
                 style={style}
                 isroot="true">
                    {this.props.children}
                    {objects.map(this.renderObject.bind(this))}
            </svg>
        );
    }
}

SVGRenderer.propTypes = {
    /** Background color for preview */
    background: PropTypes.string,

    /** Container width. */
    width: PropTypes.number,

    /** Canvas values like width, height, offset */
    canvas: PropTypes.any.isRequired,

    /** Container height. */
    height: PropTypes.number,

    /** Collection of objects in the container(canvas|preview, etc) */
    objects: PropTypes.array,

    /** Callback function for mouse over event */
    onMouseOver: PropTypes.func,

    /** Object Types like Rect, Path, Circle */
    objectTypes: PropTypes.object.isRequired,

    /** Don't know yet */
    objectRefs: PropTypes.object,

    /** onRender function */
    onRender: PropTypes.func,

    /** onMouseDown function */
    onMouseDown: PropTypes.func
};

SVGRenderer.defaultProps = {
    onMouseOver: function () {},
    width: 350,
    height: 400
};

export const styles = {
    canvas: {
        backgroundSize: 400
    }
};

export default SVGRenderer;